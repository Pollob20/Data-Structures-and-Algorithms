data structure with algorithm 
class Stack {
    constructor() {
        this.items = [];
    }

    // Pushes an element onto the stack
    push(element) {
        this.items.push(element);
    }

    // Pops an element from the stack
    pop() {
        if (this.isEmpty()) {
            return 'Stack is empty';
        }
        return this.items.pop();
    }

    // Returns the top element of the stack
    peek() {
        if (this.isEmpty()) {
            return 'Stack is empty';
        }
        return this.items[this.items.length - 1];
    }

    // Checks if the stack is empty
    isEmpty() {
        return this.items.length === 0;
    }

    // Returns the size of the stack
    size() {
        return this.items.length;
    }

    // Clears the stack
    clear() {
        this.items = [];
    }

    // Prints the stack elements
    print() {
        console.log(this.items.join(' '));
    }
}

// Example usage:
const stack = new Stack();
stack.push(10);
stack.push(20);
stack.push(30);
console.log('Stack after pushing 10, 20, 30:');
stack.print(); // Outputs: 10 20 30

console.log('Top element is:', stack.peek()); // Outputs: 30
console.log('Popped element:', stack.pop()); // Outputs: 30
console.log('Stack after popping:');
stack.print(); // Outputs: 10 20
console.log('Is stack empty?', stack.isEmpty()); // Outputs: false
console.log('Stack size:', stack.size()); // Outputs: 2

stack.clear();
console.log('Stack after clearing:');
stack.print(); // Outputs: (empty)
